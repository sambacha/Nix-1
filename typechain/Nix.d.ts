/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NixInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "getOrders(uint256[])": FunctionFragment;
    "makerAddOrder(address,address,uint256[],uint256,uint8,uint64,uint64,address)": FunctionFragment;
    "makerUpdateOrder(uint256,uint256,uint64,int64,address)": FunctionFragment;
    "makerUpdateTokenIds(uint256,uint256[],address)": FunctionFragment;
    "newOwner()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "orders(bytes32)": FunctionFragment;
    "ordersIndex(uint256)": FunctionFragment;
    "ordersLength()": FunctionFragment;
    "owner()": FunctionFragment;
    "takerExecuteOrder(uint256,uint256[],uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawTips(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrders",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "makerAddOrder",
    values: [
      string,
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makerUpdateOrder",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "makerUpdateTokenIds",
    values: [BigNumberish, BigNumberish[], string]
  ): string;
  encodeFunctionData(functionFragment: "newOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "orders", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "ordersIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ordersLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "takerExecuteOrder",
    values: [BigNumberish, BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawTips",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makerAddOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerUpdateOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerUpdateTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ordersIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ordersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takerExecuteOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTips",
    data: BytesLike
  ): Result;

  events: {
    "MakerOrderAdded(bytes32,uint256)": EventFragment;
    "MakerOrderUpdated(bytes32,uint256)": EventFragment;
    "MakerTokenIdsUpdated(bytes32,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TakerOrderExecuted(bytes32,uint256)": EventFragment;
    "ThankYou(uint256)": EventFragment;
    "TipsWithdrawn(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MakerOrderAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakerOrderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakerTokenIdsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakerOrderExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThankYou"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TipsWithdrawn"): EventFragment;
}

export type MakerOrderAddedEvent = TypedEvent<
  [string, BigNumber] & { orderKey: string; orderIndex: BigNumber }
>;

export type MakerOrderUpdatedEvent = TypedEvent<
  [string, BigNumber] & { orderKey: string; orderIndex: BigNumber }
>;

export type MakerTokenIdsUpdatedEvent = TypedEvent<
  [string, BigNumber] & { orderKey: string; orderIndex: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { _from: string; _to: string }
>;

export type TakerOrderExecutedEvent = TypedEvent<
  [string, BigNumber] & { orderKey: string; orderIndex: BigNumber }
>;

export type ThankYouEvent = TypedEvent<[BigNumber] & { tip: BigNumber }>;

export type TipsWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    token: string;
    tokens: BigNumber;
    tokenId: BigNumber;
  }
>;

export class Nix extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NixInterface;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOrders(
      orderIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        string[],
        string[],
        string[],
        BigNumber[][],
        BigNumber[],
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber][]
      ] & {
        orderKeys: string[];
        makers: string[];
        takers: string[];
        tokens: string[];
        tokenIds: BigNumber[][];
        prices: BigNumber[];
        data: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber][];
      }
    >;

    makerAddOrder(
      taker: string,
      token: string,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      orderType: BigNumberish,
      expiry: BigNumberish,
      tradeMax: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makerUpdateOrder(
      orderIndex: BigNumberish,
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMaxAdjustment: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makerUpdateTokenIds(
      orderIndex: BigNumberish,
      tokenIds: BigNumberish[],
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newOwner(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    orders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        maker: string;
        taker: string;
        token: string;
        price: BigNumber;
        orderType: number;
        expiry: BigNumber;
        tradeCount: BigNumber;
        tradeMax: BigNumber;
      }
    >;

    ordersIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ordersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    takerExecuteOrder(
      orderIndex: BigNumberish,
      tokenIds: BigNumberish[],
      totalPrice: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdrawTips(
      token: string,
      tokens: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOrders(
    orderIndices: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [
      string[],
      string[],
      string[],
      string[],
      BigNumber[][],
      BigNumber[],
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber][]
    ] & {
      orderKeys: string[];
      makers: string[];
      takers: string[];
      tokens: string[];
      tokenIds: BigNumber[][];
      prices: BigNumber[];
      data: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber][];
    }
  >;

  makerAddOrder(
    taker: string,
    token: string,
    tokenIds: BigNumberish[],
    price: BigNumberish,
    orderType: BigNumberish,
    expiry: BigNumberish,
    tradeMax: BigNumberish,
    integrator: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makerUpdateOrder(
    orderIndex: BigNumberish,
    price: BigNumberish,
    expiry: BigNumberish,
    tradeMaxAdjustment: BigNumberish,
    integrator: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makerUpdateTokenIds(
    orderIndex: BigNumberish,
    tokenIds: BigNumberish[],
    integrator: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newOwner(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    _tokenId: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  orders(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      maker: string;
      taker: string;
      token: string;
      price: BigNumber;
      orderType: number;
      expiry: BigNumber;
      tradeCount: BigNumber;
      tradeMax: BigNumber;
    }
  >;

  ordersIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  ordersLength(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  takerExecuteOrder(
    orderIndex: BigNumberish,
    tokenIds: BigNumberish[],
    totalPrice: BigNumberish,
    integrator: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdrawTips(
    token: string,
    tokens: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    getOrders(
      orderIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        string[],
        string[],
        string[],
        BigNumber[][],
        BigNumber[],
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber][]
      ] & {
        orderKeys: string[];
        makers: string[];
        takers: string[];
        tokens: string[];
        tokenIds: BigNumber[][];
        prices: BigNumber[];
        data: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber][];
      }
    >;

    makerAddOrder(
      taker: string,
      token: string,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      orderType: BigNumberish,
      expiry: BigNumberish,
      tradeMax: BigNumberish,
      integrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    makerUpdateOrder(
      orderIndex: BigNumberish,
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMaxAdjustment: BigNumberish,
      integrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    makerUpdateTokenIds(
      orderIndex: BigNumberish,
      tokenIds: BigNumberish[],
      integrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    newOwner(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    orders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        maker: string;
        taker: string;
        token: string;
        price: BigNumber;
        orderType: number;
        expiry: BigNumber;
        tradeCount: BigNumber;
        tradeMax: BigNumber;
      }
    >;

    ordersIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    ordersLength(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    takerExecuteOrder(
      orderIndex: BigNumberish,
      tokenIds: BigNumberish[],
      totalPrice: BigNumberish,
      integrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdrawTips(
      token: string,
      tokens: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MakerOrderAdded(bytes32,uint256)"(
      orderKey?: null,
      orderIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { orderKey: string; orderIndex: BigNumber }
    >;

    MakerOrderAdded(
      orderKey?: null,
      orderIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { orderKey: string; orderIndex: BigNumber }
    >;

    "MakerOrderUpdated(bytes32,uint256)"(
      orderKey?: null,
      orderIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { orderKey: string; orderIndex: BigNumber }
    >;

    MakerOrderUpdated(
      orderKey?: null,
      orderIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { orderKey: string; orderIndex: BigNumber }
    >;

    "MakerTokenIdsUpdated(bytes32,uint256)"(
      orderKey?: null,
      orderIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { orderKey: string; orderIndex: BigNumber }
    >;

    MakerTokenIdsUpdated(
      orderKey?: null,
      orderIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { orderKey: string; orderIndex: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      _from?: string | null,
      _to?: string | null
    ): TypedEventFilter<[string, string], { _from: string; _to: string }>;

    OwnershipTransferred(
      _from?: string | null,
      _to?: string | null
    ): TypedEventFilter<[string, string], { _from: string; _to: string }>;

    "TakerOrderExecuted(bytes32,uint256)"(
      orderKey?: null,
      orderIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { orderKey: string; orderIndex: BigNumber }
    >;

    TakerOrderExecuted(
      orderKey?: null,
      orderIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { orderKey: string; orderIndex: BigNumber }
    >;

    "ThankYou(uint256)"(
      tip?: null
    ): TypedEventFilter<[BigNumber], { tip: BigNumber }>;

    ThankYou(tip?: null): TypedEventFilter<[BigNumber], { tip: BigNumber }>;

    "TipsWithdrawn(address,uint256,uint256)"(
      token?: string | null,
      tokens?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; tokens: BigNumber; tokenId: BigNumber }
    >;

    TipsWithdrawn(
      token?: string | null,
      tokens?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; tokens: BigNumber; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOrders(
      orderIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makerAddOrder(
      taker: string,
      token: string,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      orderType: BigNumberish,
      expiry: BigNumberish,
      tradeMax: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makerUpdateOrder(
      orderIndex: BigNumberish,
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMaxAdjustment: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makerUpdateTokenIds(
      orderIndex: BigNumberish,
      tokenIds: BigNumberish[],
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    orders(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    ordersIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ordersLength(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    takerExecuteOrder(
      orderIndex: BigNumberish,
      tokenIds: BigNumberish[],
      totalPrice: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTips(
      token: string,
      tokens: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOrders(
      orderIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makerAddOrder(
      taker: string,
      token: string,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      orderType: BigNumberish,
      expiry: BigNumberish,
      tradeMax: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makerUpdateOrder(
      orderIndex: BigNumberish,
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMaxAdjustment: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makerUpdateTokenIds(
      orderIndex: BigNumberish,
      tokenIds: BigNumberish[],
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    orders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ordersIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ordersLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takerExecuteOrder(
      orderIndex: BigNumberish,
      tokenIds: BigNumberish[],
      totalPrice: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawTips(
      token: string,
      tokens: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
