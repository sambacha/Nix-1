/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NixInterface extends ethers.utils.Interface {
  functions: {
    "addOrder(address,address,uint8,uint8,uint256[],uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "disableOrder(address,uint256,address)": FunctionFragment;
    "executeOrders(address[],uint256[],uint256[][],int256,uint256,address)": FunctionFragment;
    "getOrder(address,uint256)": FunctionFragment;
    "getToken(uint256)": FunctionFragment;
    "getTrade(uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "ordersLength(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "royaltyEngine()": FunctionFragment;
    "tokens(address)": FunctionFragment;
    "tokensLength()": FunctionFragment;
    "tradesLength()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateOrder(address,uint256,address,uint256[],uint256,uint256,int256,uint256,address)": FunctionFragment;
    "weth()": FunctionFragment;
    "withdraw(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addOrder",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disableOrder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOrders",
    values: [
      string[],
      BigNumberish[],
      BigNumberish[][],
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ordersLength",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "royaltyEngine",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokensLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrder",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ordersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OrderAdded(address,uint256)": EventFragment;
    "OrderDisabled(address,uint256)": EventFragment;
    "OrderExecuted(address,uint256,uint256,uint256[])": EventFragment;
    "OrderUpdated(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ThankYou(uint256)": EventFragment;
    "TokenAdded(address,uint256)": EventFragment;
    "Withdrawn(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThankYou"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type OrderAddedEvent = TypedEvent<
  [string, BigNumber] & { token: string; orderIndex: BigNumber }
>;

export type OrderDisabledEvent = TypedEvent<
  [string, BigNumber] & { token: string; orderIndex: BigNumber }
>;

export type OrderExecutedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber[]] & {
    token: string;
    orderIndex: BigNumber;
    tradeIndex: BigNumber;
    tokenIds: BigNumber[];
  }
>;

export type OrderUpdatedEvent = TypedEvent<
  [string, BigNumber] & { token: string; orderIndex: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { _from: string; _to: string }
>;

export type ThankYouEvent = TypedEvent<[BigNumber] & { tip: BigNumber }>;

export type TokenAddedEvent = TypedEvent<
  [string, BigNumber] & { token: string; tokenIndex: BigNumber }
>;

export type WithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    token: string;
    tokens: BigNumber;
    tokenId: BigNumber;
  }
>;

export class Nix extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NixInterface;

  functions: {
    addOrder(
      token: string,
      taker: string,
      buyOrSell: BigNumberish,
      anyOrAll: BigNumberish,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMax: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableOrder(
      token: string,
      orderIndex: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeOrders(
      tokenList: string[],
      orderIndexes: BigNumberish[],
      tokenIdsList: BigNumberish[][],
      netAmount: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOrder(
      token: string,
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          number,
          number,
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          maker: string;
          taker: string;
          buyOrSell: number;
          anyOrAll: number;
          tokenIds: BigNumber[];
          price: BigNumber;
          expiry: BigNumber;
          tradeCount: BigNumber;
          tradeMax: BigNumber;
          royaltyFactor: BigNumber;
        }
      ] & {
        order: [
          string,
          string,
          number,
          number,
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          maker: string;
          taker: string;
          buyOrSell: number;
          anyOrAll: number;
          tokenIds: BigNumber[];
          price: BigNumber;
          expiry: BigNumber;
          tradeCount: BigNumber;
          tradeMax: BigNumber;
          royaltyFactor: BigNumber;
        };
      }
    >;

    getToken(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        _ordersLength: BigNumber;
        executed: BigNumber;
        volumeToken: BigNumber;
        volumeWeth: BigNumber;
      }
    >;

    getTrade(
      tradeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { token: string; orderIndex: BigNumber })[]
      ] & {
        taker: string;
        royaltyFactor: BigNumber;
        blockNumber: BigNumber;
        executedOrders: ([string, BigNumber] & {
          token: string;
          orderIndex: BigNumber;
        })[];
      }
    >;

    onERC721Received(
      arg0: string,
      arg1: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ordersLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    royaltyEngine(overrides?: CallOverrides): Promise<[string]>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        token: string;
        executed: BigNumber;
        volumeToken: BigNumber;
        volumeWeth: BigNumber;
      }
    >;

    tokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOrder(
      token: string,
      orderIndex: BigNumberish,
      taker: string,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMaxAdjustment: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      token: string,
      tokens: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addOrder(
    token: string,
    taker: string,
    buyOrSell: BigNumberish,
    anyOrAll: BigNumberish,
    tokenIds: BigNumberish[],
    price: BigNumberish,
    expiry: BigNumberish,
    tradeMax: BigNumberish,
    royaltyFactor: BigNumberish,
    integrator: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableOrder(
    token: string,
    orderIndex: BigNumberish,
    integrator: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeOrders(
    tokenList: string[],
    orderIndexes: BigNumberish[],
    tokenIdsList: BigNumberish[][],
    netAmount: BigNumberish,
    royaltyFactor: BigNumberish,
    integrator: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOrder(
    token: string,
    orderIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      number,
      number,
      BigNumber[],
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      maker: string;
      taker: string;
      buyOrSell: number;
      anyOrAll: number;
      tokenIds: BigNumber[];
      price: BigNumber;
      expiry: BigNumber;
      tradeCount: BigNumber;
      tradeMax: BigNumber;
      royaltyFactor: BigNumber;
    }
  >;

  getToken(
    tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      token: string;
      _ordersLength: BigNumber;
      executed: BigNumber;
      volumeToken: BigNumber;
      volumeWeth: BigNumber;
    }
  >;

  getTrade(
    tradeIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      ([string, BigNumber] & { token: string; orderIndex: BigNumber })[]
    ] & {
      taker: string;
      royaltyFactor: BigNumber;
      blockNumber: BigNumber;
      executedOrders: ([string, BigNumber] & {
        token: string;
        orderIndex: BigNumber;
      })[];
    }
  >;

  onERC721Received(
    arg0: string,
    arg1: string,
    _tokenId: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ordersLength(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  royaltyEngine(overrides?: CallOverrides): Promise<string>;

  tokens(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      token: string;
      executed: BigNumber;
      volumeToken: BigNumber;
      volumeWeth: BigNumber;
    }
  >;

  tokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  tradesLength(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOrder(
    token: string,
    orderIndex: BigNumberish,
    taker: string,
    tokenIds: BigNumberish[],
    price: BigNumberish,
    expiry: BigNumberish,
    tradeMaxAdjustment: BigNumberish,
    royaltyFactor: BigNumberish,
    integrator: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdraw(
    token: string,
    tokens: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOrder(
      token: string,
      taker: string,
      buyOrSell: BigNumberish,
      anyOrAll: BigNumberish,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMax: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableOrder(
      token: string,
      orderIndex: BigNumberish,
      integrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    executeOrders(
      tokenList: string[],
      orderIndexes: BigNumberish[],
      tokenIdsList: BigNumberish[][],
      netAmount: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getOrder(
      token: string,
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        number,
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        maker: string;
        taker: string;
        buyOrSell: number;
        anyOrAll: number;
        tokenIds: BigNumber[];
        price: BigNumber;
        expiry: BigNumber;
        tradeCount: BigNumber;
        tradeMax: BigNumber;
        royaltyFactor: BigNumber;
      }
    >;

    getToken(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        _ordersLength: BigNumber;
        executed: BigNumber;
        volumeToken: BigNumber;
        volumeWeth: BigNumber;
      }
    >;

    getTrade(
      tradeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { token: string; orderIndex: BigNumber })[]
      ] & {
        taker: string;
        royaltyFactor: BigNumber;
        blockNumber: BigNumber;
        executedOrders: ([string, BigNumber] & {
          token: string;
          orderIndex: BigNumber;
        })[];
      }
    >;

    onERC721Received(
      arg0: string,
      arg1: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    ordersLength(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    royaltyEngine(overrides?: CallOverrides): Promise<string>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        token: string;
        executed: BigNumber;
        volumeToken: BigNumber;
        volumeWeth: BigNumber;
      }
    >;

    tokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    tradesLength(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOrder(
      token: string,
      orderIndex: BigNumberish,
      taker: string,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMaxAdjustment: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdraw(
      token: string,
      tokens: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OrderAdded(address,uint256)"(
      token?: null,
      orderIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; orderIndex: BigNumber }
    >;

    OrderAdded(
      token?: null,
      orderIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; orderIndex: BigNumber }
    >;

    "OrderDisabled(address,uint256)"(
      token?: null,
      orderIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; orderIndex: BigNumber }
    >;

    OrderDisabled(
      token?: null,
      orderIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; orderIndex: BigNumber }
    >;

    "OrderExecuted(address,uint256,uint256,uint256[])"(
      token?: null,
      orderIndex?: null,
      tradeIndex?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber[]],
      {
        token: string;
        orderIndex: BigNumber;
        tradeIndex: BigNumber;
        tokenIds: BigNumber[];
      }
    >;

    OrderExecuted(
      token?: null,
      orderIndex?: null,
      tradeIndex?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber[]],
      {
        token: string;
        orderIndex: BigNumber;
        tradeIndex: BigNumber;
        tokenIds: BigNumber[];
      }
    >;

    "OrderUpdated(address,uint256)"(
      token?: null,
      orderIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; orderIndex: BigNumber }
    >;

    OrderUpdated(
      token?: null,
      orderIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; orderIndex: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      _from?: string | null,
      _to?: string | null
    ): TypedEventFilter<[string, string], { _from: string; _to: string }>;

    OwnershipTransferred(
      _from?: string | null,
      _to?: string | null
    ): TypedEventFilter<[string, string], { _from: string; _to: string }>;

    "ThankYou(uint256)"(
      tip?: null
    ): TypedEventFilter<[BigNumber], { tip: BigNumber }>;

    ThankYou(tip?: null): TypedEventFilter<[BigNumber], { tip: BigNumber }>;

    "TokenAdded(address,uint256)"(
      token?: null,
      tokenIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; tokenIndex: BigNumber }
    >;

    TokenAdded(
      token?: null,
      tokenIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; tokenIndex: BigNumber }
    >;

    "Withdrawn(address,uint256,uint256)"(
      token?: string | null,
      tokens?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; tokens: BigNumber; tokenId: BigNumber }
    >;

    Withdrawn(
      token?: string | null,
      tokens?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; tokens: BigNumber; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    addOrder(
      token: string,
      taker: string,
      buyOrSell: BigNumberish,
      anyOrAll: BigNumberish,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMax: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableOrder(
      token: string,
      orderIndex: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeOrders(
      tokenList: string[],
      orderIndexes: BigNumberish[],
      tokenIdsList: BigNumberish[][],
      netAmount: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOrder(
      token: string,
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToken(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrade(
      tradeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ordersLength(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyEngine(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    tradesLength(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOrder(
      token: string,
      orderIndex: BigNumberish,
      taker: string,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMaxAdjustment: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      token: string,
      tokens: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOrder(
      token: string,
      taker: string,
      buyOrSell: BigNumberish,
      anyOrAll: BigNumberish,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMax: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableOrder(
      token: string,
      orderIndex: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeOrders(
      tokenList: string[],
      orderIndexes: BigNumberish[],
      tokenIdsList: BigNumberish[][],
      netAmount: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOrder(
      token: string,
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToken(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrade(
      tradeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ordersLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    royaltyEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOrder(
      token: string,
      orderIndex: BigNumberish,
      taker: string,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMaxAdjustment: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      tokens: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
