/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OrderStruct = {
  maker: string;
  taker: string;
  buyOrSell: BigNumberish;
  anyOrAll: BigNumberish;
  tokenIdsKey: BytesLike;
  price: BigNumberish;
  expiry: BigNumberish;
  tradeCount: BigNumberish;
  tradeMax: BigNumberish;
  royaltyFactor: BigNumberish;
};

export type OrderStructOutput = [
  string,
  string,
  number,
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  maker: string;
  taker: string;
  buyOrSell: number;
  anyOrAll: number;
  tokenIdsKey: string;
  price: BigNumber;
  expiry: BigNumber;
  tradeCount: BigNumber;
  tradeMax: BigNumber;
  royaltyFactor: BigNumber;
};

export type ExecutedOrderStruct = { token: string; orderIndex: BigNumberish };

export type ExecutedOrderStructOutput = [string, BigNumber] & {
  token: string;
  orderIndex: BigNumber;
};

export interface NixInterface extends utils.Interface {
  functions: {
    "addOrder(address,address,uint8,uint8,uint256[],uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "executeOrders(address[],uint256[],uint256[][],int256,uint256,address)": FunctionFragment;
    "getLengths()": FunctionFragment;
    "getOrder(address,uint256)": FunctionFragment;
    "getToken(uint256)": FunctionFragment;
    "getTokenIds(bytes32)": FunctionFragment;
    "getTrade(uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "ordersLength(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "royaltyEngine()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateOrder(address,uint256,address,uint256[],uint256,uint256,int256,uint256,address)": FunctionFragment;
    "updateOrderPriceAndExpiry(address,uint256,uint256,uint256,address)": FunctionFragment;
    "weth()": FunctionFragment;
    "withdraw(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addOrder",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOrders",
    values: [
      string[],
      BigNumberish[],
      BigNumberish[][],
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLengths",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenIds",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ordersLength",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "royaltyEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrder",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrderPriceAndExpiry",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLengths", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ordersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOrderPriceAndExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OrderAdded(address,uint256)": EventFragment;
    "OrderExecuted(address,uint256,uint256,uint256[])": EventFragment;
    "OrderPriceAndExpiryUpdated(address,uint256)": EventFragment;
    "OrderUpdated(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ThankYou(uint256)": EventFragment;
    "TokenAdded(address,uint256)": EventFragment;
    "Withdrawn(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderPriceAndExpiryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThankYou"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type OrderAddedEvent = TypedEvent<
  [string, BigNumber],
  { token: string; orderIndex: BigNumber }
>;

export type OrderAddedEventFilter = TypedEventFilter<OrderAddedEvent>;

export type OrderExecutedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber[]],
  {
    token: string;
    orderIndex: BigNumber;
    tradeIndex: BigNumber;
    tokenIds: BigNumber[];
  }
>;

export type OrderExecutedEventFilter = TypedEventFilter<OrderExecutedEvent>;

export type OrderPriceAndExpiryUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { token: string; orderIndex: BigNumber }
>;

export type OrderPriceAndExpiryUpdatedEventFilter =
  TypedEventFilter<OrderPriceAndExpiryUpdatedEvent>;

export type OrderUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { token: string; orderIndex: BigNumber }
>;

export type OrderUpdatedEventFilter = TypedEventFilter<OrderUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { from: string; to: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ThankYouEvent = TypedEvent<[BigNumber], { tip: BigNumber }>;

export type ThankYouEventFilter = TypedEventFilter<ThankYouEvent>;

export type TokenAddedEvent = TypedEvent<
  [string, BigNumber],
  { token: string; tokenIndex: BigNumber }
>;

export type TokenAddedEventFilter = TypedEventFilter<TokenAddedEvent>;

export type WithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { token: string; tokens: BigNumber; tokenId: BigNumber }
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface Nix extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NixInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOrder(
      token: string,
      taker: string,
      buyOrSell: BigNumberish,
      anyOrAll: BigNumberish,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMax: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeOrders(
      tokenList: string[],
      orderIndexes: BigNumberish[],
      tokenIdsList: BigNumberish[][],
      netAmount: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLengths(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _tokensLength: BigNumber;
        _tradesLength: BigNumber;
      }
    >;

    getOrder(
      token: string,
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[OrderStructOutput] & { order: OrderStructOutput }>;

    getToken(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        _ordersLength: BigNumber;
        executed: BigNumber;
        volumeToken: BigNumber;
        volumeWeth: BigNumber;
      }
    >;

    getTokenIds(
      tokenIdsKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { tokenIds: BigNumber[] }>;

    getTrade(
      tradeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, ExecutedOrderStructOutput[]] & {
        taker: string;
        royaltyFactor: BigNumber;
        blockNumber: BigNumber;
        executedOrders: ExecutedOrderStructOutput[];
      }
    >;

    onERC721Received(
      arg0: string,
      arg1: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ordersLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    royaltyEngine(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOrder(
      token: string,
      orderIndex: BigNumberish,
      taker: string,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMaxAdjustment: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOrderPriceAndExpiry(
      token: string,
      orderIndex: BigNumberish,
      price: BigNumberish,
      expiry: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      token: string,
      tokens: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addOrder(
    token: string,
    taker: string,
    buyOrSell: BigNumberish,
    anyOrAll: BigNumberish,
    tokenIds: BigNumberish[],
    price: BigNumberish,
    expiry: BigNumberish,
    tradeMax: BigNumberish,
    royaltyFactor: BigNumberish,
    integrator: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeOrders(
    tokenList: string[],
    orderIndexes: BigNumberish[],
    tokenIdsList: BigNumberish[][],
    netAmount: BigNumberish,
    royaltyFactor: BigNumberish,
    integrator: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLengths(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _tokensLength: BigNumber;
      _tradesLength: BigNumber;
    }
  >;

  getOrder(
    token: string,
    orderIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<OrderStructOutput>;

  getToken(
    tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      token: string;
      _ordersLength: BigNumber;
      executed: BigNumber;
      volumeToken: BigNumber;
      volumeWeth: BigNumber;
    }
  >;

  getTokenIds(
    tokenIdsKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTrade(
    tradeIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, ExecutedOrderStructOutput[]] & {
      taker: string;
      royaltyFactor: BigNumber;
      blockNumber: BigNumber;
      executedOrders: ExecutedOrderStructOutput[];
    }
  >;

  onERC721Received(
    arg0: string,
    arg1: string,
    _tokenId: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ordersLength(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  royaltyEngine(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOrder(
    token: string,
    orderIndex: BigNumberish,
    taker: string,
    tokenIds: BigNumberish[],
    price: BigNumberish,
    expiry: BigNumberish,
    tradeMaxAdjustment: BigNumberish,
    royaltyFactor: BigNumberish,
    integrator: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOrderPriceAndExpiry(
    token: string,
    orderIndex: BigNumberish,
    price: BigNumberish,
    expiry: BigNumberish,
    integrator: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdraw(
    token: string,
    tokens: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOrder(
      token: string,
      taker: string,
      buyOrSell: BigNumberish,
      anyOrAll: BigNumberish,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMax: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeOrders(
      tokenList: string[],
      orderIndexes: BigNumberish[],
      tokenIdsList: BigNumberish[][],
      netAmount: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getLengths(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _tokensLength: BigNumber;
        _tradesLength: BigNumber;
      }
    >;

    getOrder(
      token: string,
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OrderStructOutput>;

    getToken(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        _ordersLength: BigNumber;
        executed: BigNumber;
        volumeToken: BigNumber;
        volumeWeth: BigNumber;
      }
    >;

    getTokenIds(
      tokenIdsKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTrade(
      tradeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, ExecutedOrderStructOutput[]] & {
        taker: string;
        royaltyFactor: BigNumber;
        blockNumber: BigNumber;
        executedOrders: ExecutedOrderStructOutput[];
      }
    >;

    onERC721Received(
      arg0: string,
      arg1: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    ordersLength(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    royaltyEngine(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOrder(
      token: string,
      orderIndex: BigNumberish,
      taker: string,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMaxAdjustment: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOrderPriceAndExpiry(
      token: string,
      orderIndex: BigNumberish,
      price: BigNumberish,
      expiry: BigNumberish,
      integrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdraw(
      token: string,
      tokens: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OrderAdded(address,uint256)"(
      token?: string | null,
      orderIndex?: BigNumberish | null
    ): OrderAddedEventFilter;
    OrderAdded(
      token?: string | null,
      orderIndex?: BigNumberish | null
    ): OrderAddedEventFilter;

    "OrderExecuted(address,uint256,uint256,uint256[])"(
      token?: string | null,
      orderIndex?: BigNumberish | null,
      tradeIndex?: BigNumberish | null,
      tokenIds?: null
    ): OrderExecutedEventFilter;
    OrderExecuted(
      token?: string | null,
      orderIndex?: BigNumberish | null,
      tradeIndex?: BigNumberish | null,
      tokenIds?: null
    ): OrderExecutedEventFilter;

    "OrderPriceAndExpiryUpdated(address,uint256)"(
      token?: string | null,
      orderIndex?: BigNumberish | null
    ): OrderPriceAndExpiryUpdatedEventFilter;
    OrderPriceAndExpiryUpdated(
      token?: string | null,
      orderIndex?: BigNumberish | null
    ): OrderPriceAndExpiryUpdatedEventFilter;

    "OrderUpdated(address,uint256)"(
      token?: string | null,
      orderIndex?: BigNumberish | null
    ): OrderUpdatedEventFilter;
    OrderUpdated(
      token?: string | null,
      orderIndex?: BigNumberish | null
    ): OrderUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferredEventFilter;

    "ThankYou(uint256)"(tip?: null): ThankYouEventFilter;
    ThankYou(tip?: null): ThankYouEventFilter;

    "TokenAdded(address,uint256)"(
      token?: string | null,
      tokenIndex?: BigNumberish | null
    ): TokenAddedEventFilter;
    TokenAdded(
      token?: string | null,
      tokenIndex?: BigNumberish | null
    ): TokenAddedEventFilter;

    "Withdrawn(address,uint256,uint256)"(
      token?: string | null,
      tokens?: null,
      tokenId?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      token?: string | null,
      tokens?: null,
      tokenId?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    addOrder(
      token: string,
      taker: string,
      buyOrSell: BigNumberish,
      anyOrAll: BigNumberish,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMax: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeOrders(
      tokenList: string[],
      orderIndexes: BigNumberish[],
      tokenIdsList: BigNumberish[][],
      netAmount: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLengths(overrides?: CallOverrides): Promise<BigNumber>;

    getOrder(
      token: string,
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToken(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenIds(
      tokenIdsKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrade(
      tradeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ordersLength(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyEngine(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOrder(
      token: string,
      orderIndex: BigNumberish,
      taker: string,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMaxAdjustment: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOrderPriceAndExpiry(
      token: string,
      orderIndex: BigNumberish,
      price: BigNumberish,
      expiry: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      token: string,
      tokens: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOrder(
      token: string,
      taker: string,
      buyOrSell: BigNumberish,
      anyOrAll: BigNumberish,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMax: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeOrders(
      tokenList: string[],
      orderIndexes: BigNumberish[],
      tokenIdsList: BigNumberish[][],
      netAmount: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLengths(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrder(
      token: string,
      orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToken(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenIds(
      tokenIdsKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrade(
      tradeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ordersLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    royaltyEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOrder(
      token: string,
      orderIndex: BigNumberish,
      taker: string,
      tokenIds: BigNumberish[],
      price: BigNumberish,
      expiry: BigNumberish,
      tradeMaxAdjustment: BigNumberish,
      royaltyFactor: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOrderPriceAndExpiry(
      token: string,
      orderIndex: BigNumberish,
      price: BigNumberish,
      expiry: BigNumberish,
      integrator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      tokens: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
