/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ExecutedOrderStruct = { token: string; orderIndex: BigNumberish }[];

export type ExecutedOrderStructOutput = ([string, BigNumber] & {
  token: string;
  orderIndex: BigNumber;
})[];

export type OrderStruct = {
  maker: string;
  taker: string;
  buyOrSell: BigNumberish;
  anyOrAll: BigNumberish;
  tokenIdsKey: BytesLike;
  price: BigNumberish;
  expiry: BigNumberish;
  tradeCount: BigNumberish;
  tradeMax: BigNumberish;
  royaltyFactor: BigNumberish;
};

export type OrderStructOutput = [
  string,
  string,
  number,
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  maker: string;
  taker: string;
  buyOrSell: number;
  anyOrAll: number;
  tokenIdsKey: string;
  price: BigNumber;
  expiry: BigNumber;
  tradeCount: BigNumber;
  tradeMax: BigNumber;
  royaltyFactor: BigNumber;
};

export interface NixHelperInterface extends utils.Interface {
  functions: {
    "getOrders(address,uint256[])": FunctionFragment;
    "getTokens(uint256[])": FunctionFragment;
    "getTrades(uint256[])": FunctionFragment;
    "nix()": FunctionFragment;
    "orderStatus(address,(address,address,uint8,uint8,bytes32,uint256,uint64,uint64,uint64,uint64))": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getOrders",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokens",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrades",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "nix", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "orderStatus",
    values: [string, OrderStruct]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getOrders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTrades", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nix", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {};
}

export interface NixHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NixHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getOrders(
      token: string,
      orderIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[][], BigNumber[], BigNumber[][]] & {
        makers: string[];
        takers: string[];
        tokenIds: BigNumber[][];
        prices: BigNumber[];
        data: BigNumber[][];
      }
    >;

    getTokens(
      tokensIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        tokens: string[];
        ordersLengthList: BigNumber[];
        executedList: BigNumber[];
        volumeTokenList: BigNumber[];
        volumeWethList: BigNumber[];
      }
    >;

    getTrades(
      tradeIndexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[], ExecutedOrderStructOutput[]] & {
        takers: string[];
        royaltyFactors: BigNumber[];
        blockNumbers: BigNumber[];
        ordersList: ExecutedOrderStructOutput[];
      }
    >;

    nix(overrides?: CallOverrides): Promise<[string]>;

    orderStatus(
      token: string,
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<[number]>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  getOrders(
    token: string,
    orderIndices: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], BigNumber[][], BigNumber[], BigNumber[][]] & {
      makers: string[];
      takers: string[];
      tokenIds: BigNumber[][];
      prices: BigNumber[];
      data: BigNumber[][];
    }
  >;

  getTokens(
    tokensIndices: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
      tokens: string[];
      ordersLengthList: BigNumber[];
      executedList: BigNumber[];
      volumeTokenList: BigNumber[];
      volumeWethList: BigNumber[];
    }
  >;

  getTrades(
    tradeIndexes: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber[], ExecutedOrderStructOutput[]] & {
      takers: string[];
      royaltyFactors: BigNumber[];
      blockNumbers: BigNumber[];
      ordersList: ExecutedOrderStructOutput[];
    }
  >;

  nix(overrides?: CallOverrides): Promise<string>;

  orderStatus(
    token: string,
    order: OrderStruct,
    overrides?: CallOverrides
  ): Promise<number>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getOrders(
      token: string,
      orderIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[][], BigNumber[], BigNumber[][]] & {
        makers: string[];
        takers: string[];
        tokenIds: BigNumber[][];
        prices: BigNumber[];
        data: BigNumber[][];
      }
    >;

    getTokens(
      tokensIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        tokens: string[];
        ordersLengthList: BigNumber[];
        executedList: BigNumber[];
        volumeTokenList: BigNumber[];
        volumeWethList: BigNumber[];
      }
    >;

    getTrades(
      tradeIndexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[], ExecutedOrderStructOutput[]] & {
        takers: string[];
        royaltyFactors: BigNumber[];
        blockNumbers: BigNumber[];
        ordersList: ExecutedOrderStructOutput[];
      }
    >;

    nix(overrides?: CallOverrides): Promise<string>;

    orderStatus(
      token: string,
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<number>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getOrders(
      token: string,
      orderIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokens(
      tokensIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrades(
      tradeIndexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nix(overrides?: CallOverrides): Promise<BigNumber>;

    orderStatus(
      token: string,
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getOrders(
      token: string,
      orderIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokens(
      tokensIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrades(
      tradeIndexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderStatus(
      token: string,
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
